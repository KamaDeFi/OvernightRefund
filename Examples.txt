Example 1 (0x2eA1815B01067f68EF87895E0467A619340d5c8A):
    - Initially had 371.957836 USD+
        - usd_holdings_per_address[0x2eA1815B01067f68EF87895E0467A619340d5c8A] = 371.957836

    - Transactions in first loop:
        - Transferred 371.957836 USD+ to another address
            - usd_holdings_per_address[0x2eA1815B01067f68EF87895E0467A619340d5c8A] = 371.957836 - 371.957836 = 0

    - Checking LP holdings before negative rebase in second loop
        - No LP holdings, so no change

    - Calculating refund in third loop
        - refund_per_user[0x2eA1815B01067f68EF87895E0467A619340d5c8A] = 0 - 0 = $0

    - Spreadsheet claims that this address is owed $185.98, but this address should be owed $0

Example 2 (0xDB6AbcfE6913c1b296dF2970d3b57A9B431D1680):
    - Initially had 0 USD+
        - usd_holdings_per_address[0xDB6AbcfE6913c1b296dF2970d3b57A9B431D1680] = 0

    - Transactions in first loop:
        - Removed LP receiving 27,537.176445 USD+
            - usd_holdings_per_address[0xDB6AbcfE6913c1b296dF2970d3b57A9B431D1680] = 0 + 27,537.176445 = 27,537.176445
        - Received 371.957836 USD+ from another address
            - usd_holdings_per_address[0xDB6AbcfE6913c1b296dF2970d3b57A9B431D1680] = 27,537.176445 + 371.957836 = 27,909.134281

    - Checking LP holdings before negative rebase in second loop
        - No LP holdings, so no change

    - Calculating refund in third loop
        - refund_per_user[0xDB6AbcfE6913c1b296dF2970d3b57A9B431D1680] = 27,909.134281 - 4355.815119 = 23,553.319162

    - Spreadsheet claims that this address is owed $13,954.57, but it should be owed $23,553.32

Example 3 (0x10c5Af029f42579Da7CDcaEE1eF31AeA624F12fE):
    - Initially had 2096.769860 USD+
        - usd_holdings_per_address[0x10c5Af029f42579Da7CDcaEE1eF31AeA624F12fE] = 2096.769860

    - Transactions in first loop:
        - Removed LP receiving 1,315.777647 USD+
            - usd_holdings_per_address[0x10c5Af029f42579Da7CDcaEE1eF31AeA624F12fE] = 2096.769860 + 1,315.777647 = 3,412.547507
        - Removed LP receiving 296.56305 USD+
            - usd_holdings_per_address[0x10c5Af029f42579Da7CDcaEE1eF31AeA624F12fE] = 3,412.547507 + 296.56305 = 3,709.110557

    - Checking LP holdings before negative rebase in second loop
        - No LP holdings, so no change

    - Calculating refund in third loop
        - refund_per_user[0x10c5Af029f42579Da7CDcaEE1eF31AeA624F12fE] = 3,709.110557 - 578.88574 = 3,130.224817

    - Spreadsheet claims that this address is owed $2,902.94, but it should be owed $3,130.22

Example 4 (0xe92a405AfA5F6a1B55F87F4BFF1Dd03bfcb144c3):
    - Initially had 87.930236 USD+
        - usd_holdings_per_address[0xe92a405AfA5F6a1B55F87F4BFF1Dd03bfcb144c3] = 87.930236

    - Transactions in first loop:
        - No transactions, so no change

    - Checking LP holdings before negative rebase in second loop
        - usd_holdings_per_address[0xe92a405AfA5F6a1B55F87F4BFF1Dd03bfcb144c3] = 87.930236 + 2.144418 = 90.074654

    - Calculating refund in third loop
        - refund_per_user[0xe92a405AfA5F6a1B55F87F4BFF1Dd03bfcb144c3] = 90.074654 - 14.058069 = 76.016585

    - Spreadsheet claims that this address is owed $89.48, but it should be owed $76.02

Example 5 (fictional_address_0):
    - Initially had 100 USD+, and an LP containing 30 USD+ / 30 BUSD
        - At this stage, 1 USD+ = $1, so we put 100 directly in usd_holdings_per_address[fictional_address_0]
        - We do not take into account any LPs at this stage, so that is why we only put 100 for now
        - usd_holdings_per_address[fictional_address_0] = 100

    - Transactions in first loop:
        - Sold 50 USD+, bought $20 worth of BNB
            - At this stage, 1 USD+ is not equal to $1. Therefore, we use the dollar value of the transaction
            - The user gains $20 worth of BNB in the transaction, and so this $20 can be removed
            - usd_holdings_per_address[fictional_address_0] = 100 - 20 = 80
        - Sold $10 worth of MDB+, bought 60 USD+
            - Again, 1 USD+ is not equal to $1, so we use the dollar value of the transaction
            - The user "loses" $10 of MDB+ to buy the USD+, and so that $10 needs to be added to the refund
            - usd_holdings_per_address[fictional_address_0] = 80 + 10 = 90
        - Transfers 10 USD+ to another address
            - This 10 USD+ is transferred to another address, so the refund corresponding to it should not be calculated for fictional_address_0
            - This is just like the user starting out at the beginning with 100 - 10 = 90 USD+. So we simply subtract it
            - Note again, $80 is the dollar value owned by fictional_address_0, not the USD+ amount
            - usd_holdings_per_address[fictional_address_0] = 90 - 10 = 80

    - Checking LP holdings before negative rebase in second loop
        - Now that this is the block just before the negative rebase, we should include the LP tokens
        - In this example, the LP now contains 50 USD+ / 10 BUSD, and we can safely add the 50 USD+
        - Even though 1 USD+ is not equal to $1, this is still the dollar value owned by fictional_address_0
        - usd_holdings_per_address[fictional_address_0] = 80 + 50 = 130

    - Calculating refund in third loop
        - Just before the negative rebase, the user had 150 USD+ (started off with 100, sold 50, bought 60, transferred 10, and had 50 in LP tokens)
        - That is the USD+ amount owned by the user and not the dollar value. It is not relevant to the calculations, but this is just to demonstrate where the 23.410696 in the next line comes from
        - The negative rebase results in ~15.6% of the USD+, so in this example, 15.6% * 150 = 23.410696, which is the total USD+ the user has after the negative rebase (including the USD+ in LP tokens)
        - All of the above is just to explain where the 23.410696 comes from. In this section, the code should get the USD+ amount owned by the user after the negative rebase from the blockchain directly (balanceOf(address), as well as the USD+ in the LPs owned by the user, including the LPs that are staked in Cone and Unknown)
        - usd_plus_amount = 23.410696
        - refund_per_user[fictional_address_0] = 130 - 23.410696 = 106.589304

    - Therefore, this address is owed $106.59
    - This makes sense because they originally (before the announcement) had 100 USD+, 10$ worth of MDB+ that they used to buy extra USD+, 30 USD+ in the LP, and 30 BUSD in the LP, but they transferred 10 USD+ to another address. So the total money he had in the start is 100 + 10 + 30 + 30 - 10 = $160
    - After the negative rebase, the user has $20 worth of BNB that he bought from selling USD+, 15.607130 USD+ in their address after the negative rebase, and 7.803565 USD+ / 10 BUSD in their LP after the negative rebase. So the total money he had after the negative rebase is 20 + 15.607130 + 7.803565 + 10 = $53.41
    - If we refund the user $106.59 as the code says, then they would end up with $53.41 + $106.59 = $160, which is the exact dollar value they started with

Example 6 (0x5Bf64C6bbe1A0F3342B499c7F26B3Fa3EAd0CB0d):
    - Initially had 121.720013 USD+
        - usd_holdings_per_address[0x5Bf64C6bbe1A0F3342B499c7F26B3Fa3EAd0CB0d] = 121.720013

    - Transactions in first loop:
        - Removed LP receiving 4,163.876345 USD+
            - usd_holdings_per_address[0x5Bf64C6bbe1A0F3342B499c7F26B3Fa3EAd0CB0d] = 121.720013 + 4,163.876345 = 4,285.596358

    - Checking LP holdings before negative rebase in second loop
        - No LP holdings, so no change

    - Calculating refund in third loop
        - refund_per_user[0x5Bf64C6bbe1A0F3342B499c7F26B3Fa3EAd0CB0d] = 4,285.596358 - 668.858633 = 3,616.737725

    - Spreadsheet claims that this address is owed $2,203.66, but it should be owed $3,616.74

Example 7 (fictional_address_1):
    - Initially had 0 USD+
        - usd_holdings_per_address[fictional_address_1] = 0

    - Transactions in first loop:
        - Sold $100 worth of BNB, bought 500 USD+
            - 1 USD+ is not equal to $1, so we use the dollar value of the transaction
            - The user "loses" $100 of BNB to buy the USD+, and so that $100 needs to be added to the refund
            - usd_holdings_per_address[fictional_address_1] = 0 + 100 = 100

    - Checking LP holdings before negative rebase in second loop
        - No LP holdings, so no change

    - Calculating refund in third loop
        - Just before the negative rebase, the user had 500 USD+ (started off with 0, and then bought 500)
        - That is the USD+ amount owned by the user and not the dollar value. It is not relevant to the calculations, but this is just to demonstrate where the 78.035653 in the next line comes from
        - The negative rebase results in ~15.6% of the USD+, so in this example, 15.6% * 500 = 78.035653, which is the total USD+ the user has after the negative rebase
        - All of the above is just to explain where the 78.035653 comes from. In this section, the code should get the USD+ amount owned by the user after the negative rebase from the blockchain directly
        - usd_plus_amount = 78.035653
        - refund_per_user[fictional_address_1] = 100 - 78.035653 = 21.964347

    - Therefore, this address is owed $21.96
    - This makes sense because they originally (before the announcement) had 100$ worth of BNB that they used to buy the USD+
    - After the negative rebase, the user has 78.035653 USD+ in their address. So the total money he had after the negative rebase is $78.04
    - If we refund the user $21.96 as the code says, then they would end up with $78.04 + $21.96 = $100, which is the exact dollar value they started with

Example 8 (fictional_address_2):
    - Initially had 100 USD+
        - usd_holdings_per_address[fictional_address_2] = 100

    - Transactions in first loop:
        - Sold 100 USD+, bought $20 worth of BNB
            - 1 USD+ is not equal to $1, so we use the dollar value of the transaction
            - The user gains $20 worth of BNB in the transaction, and so this $20 can be removed
            - usd_holdings_per_address[fictional_address_0] = 100 - 20 = 80

    - Checking LP holdings before negative rebase in second loop
        - No LP holdings, so no change

    - Calculating refund in third loop
        - Just before the negative rebase, the user had 0 USD+
        - usd_plus_amount = 0
        - refund_per_user[fictional_address_1] = 80 - 0 = 80

    - Therefore, this address is owed $80
    - This makes sense because they originally (before the announcement) had 100 USD+ (which is $100)
    - After the negative rebase, the user has 0 USD+ in their address and $20 worth of BNB that they got from the sell transaction. So the total money he had after the negative rebase is $20
    - If we refund the user $80 as the code says, then they would end up with $20 + $80 = $100, which is the exact dollar value they started with
